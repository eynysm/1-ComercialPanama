<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        sRFGqIQg+D9HFFjRE7b6PAAAAABJRU5ErkJggg==
</value>
  </data>
</root>